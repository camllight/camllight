\chapter{Language extensions} \label{c:extensions}

This chapter describes the language features that are implemented in
Caml Light, but not described in the Caml Light reference manual. In
contrast with the fairly stable kernel language that is described in
the reference manual, the extensions presented here are still
experimental, and may be removed or changed in the future.

\section{Streams, parsers, and printers}
\label{s:streams}

Caml Light comprises a built-in type for {\it streams} (possibly infinite
sequences of elements, that are evaluated on demand), and associated
stream expressions, to build streams, and stream patterns, to
destructure streams. Streams and stream patterns provide a natural
approach to the writing of recursive-descent parsers.

Streams are presented by the following extensions to the syntactic
classes of expressions:

\begin{syntax}
expr:
          \ldots
        | '[<' '>]'
        | '[<' stream-component { ';' stream-component } '>]'
        | 'function' stream-matching
        | 'match' expr 'with' stream-matching
;
stream-component:
          "'" expr
        | expr
;
stream-matching:
        stream-pattern '->' expr { '|' stream-pattern '->' expr }
;
stream-pattern:
          '[<' '>]'
        | '[<' stream-comp-pat { ';' stream-comp-pat }'>]'
;
stream-comp-pat:
          "'" pattern
        | expr pattern
        | ident
;
\end{syntax}

Stream expressions are bracketed by \verb"[<" and \verb">]". They
represent the concatenation of their components. The component
@"'" expr@ represents the one-element stream whose element is the
value of @expr@. The component @expr@ represents a
sub-stream. For instance, if both "s" and "t" are streams of integers,
then \verb"[<'1; s; t; '2>]" is a stream of integers containing the
element "1", then the elements of "s", then those of "t", and finally
"2". The empty stream is denoted by \verb"[< >]".

Unlike any other kind of expressions in the language, stream
expressions are submitted to lazy evaluation: the components are not
evaluated when the stream is built, but only when they are accessed
during stream matching. The components are evaluated once, the first
time they are accessed; the following accesses reuse the value
computed the first time.

Stream patterns, also bracketed by \verb"[<" and \verb">]", describe
initial segments of streams. In particular, the stream pattern
\verb"[< >]" matches all streams. Stream pattern components are
matched against the corresponding elements of a stream. The component
@"'" pattern@ matches the corresponding stream element against the
pattern. The component @expr pattern@ applies the function denoted by
@expr@ to the current stream, then matches the result of
the function against @pattern@. Finally, the component @ident@ simply
binds the identifier to the stream being matched. (The current
implementation limits @ident@ to appear last in a stream pattern.)

Stream matching proceeds destructively: once a component has been
matched, it is discarded from the stream (by in-place modification).

Stream matching proceeds in two steps: first, a pattern is selected by
matching the stream against the first components of the stream
patterns; then, the following components of the selected pattern are
checked against the stream. If the following components do not match,
the exception "Parse_error" is raised. There is no backtracking here:
stream matching commits to the pattern selected according to the first
element. If none of the first components of the stream patterns match,
the exception "Parse_failure" is raised. The "Parse_failure" 
exception causes the next alternative to be tried, if it occurs during
the matching of the first element of a stream, before matching has
committed to one pattern. 

See {\em Functional programming using Caml Light} for a more gentle
introductions to streams, and for some examples of their use in
writing parsers. A more formal presentation of streams, and a
discussion of alternate semantics, can be found in {\em Parsers in ML}
by Michel Mauny and Daniel de Rauglaudre, in the proceedings of the
1992 ACM conference on Lisp and Functional Programming.

\section{Range patterns}

In patterns, Caml Light recognizes the form
@"`" c "`" ".." "`" d "`"@
(two character constants separated by~\verb|..|) as a shorthand for
the pattern
$$\hbox{@"`" c "`" "|" "`" c_1 "`" "|" "`" c_2 "`" "|" \ldots
        "|" "`" c_n "`" "|" "`" d "`"@} $$
where $c_1, c_2, \ldots, c_n$ are the characters that occur between
$c$ and $d$ in the ASCII character set. For instance, 
the pattern \verb|`0`..`9`| matches all characters that are digits.

\section{Recursive definitions of values}

Besides "let rec" definitions of functional values, as described in
the reference manual, Caml Light supports a certain class of
recursive definitions of non-functional values. For instance, the
following definition is accepted:
\begin{verbatim}
        let rec x = 1 :: y and y = 2 :: x;;
\end{verbatim}
and correctly binds "x" to the cyclic list $"1::2::1::2::"\ldots$, and
"y" to the cyclic list $"2::1::2::1::"\ldots$ Informally, the class of
accepted definitions consists of those definitions where the defined
variables occur only inside function bodies or as a field of a data
structure. Moreover, the patterns in the left-hand sides must be
identifiers, nothing more complex.

\section{Mutable variant types}

The argument of a value constructor can be declared ``mutable'' when
the variant type is defined:
\begin{verbatim}
        type foo = A of mutable int
                 | B of mutable int * int
                 | ...
\end{verbatim}
This allows in-place modification of the argument part of a
constructed value. Modification is performed by a new kind of
expressions, written @ident "<-" expr@, where @ident@ is an identifier
bound by pattern-matching to the argument of a mutable constructor,
and @expr@ denotes the value that must be stored in place of that
argument. Continuing the example above:
\begin{verbatim}
        let x = A 1 in
          begin match x with A y -> y <- 2 | _ -> () end;
          x
\end{verbatim}
returns the value "A 2". The notation @ident "<-" expr@ works also if
@ident@ is an identifier bound by pattern-matching to the value of a
mutable field in a record. For instance,
\begin{verbatim}
        type bar = {mutable lbl : int};;
        let x = {lbl = 1} in
          begin match x with {lbl = y} -> y <- 2 end;
          x
\end{verbatim}
returns the value \verb|{lbl = 2}|.

\section{Directives}

In addition to the standard \verb|#open| and \verb|#close| directives,
Caml Light provides three additional directives.

\begin{options}
\item[@'#infix' '"' id '"'@]
Change the lexical status of the identifier @id@: in the remainder of
the compilation unit, @id@ is recognized as an infix operator, just
like @'+'@. The notation @'prefix' id@ can be used to refer to the
identifier @id@ itself. Expressions of the form @expr_1 id expr_2@ are
parsed as the application @'prefix' id expr_1 expr_2@. The argument to
the @'#infix'@ directive must be an identifier, that is, a sequence of
letters, digits and underscores starting with a letter; otherwise, the
@'#infix'@ declaration has no effect. Example:
\begin{verbatim}
        #infix "union";;
        let prefix union = fun x y -> ... ;;
        [1,2] union [3,4];;
\end{verbatim}

\item[@'#uninfix' '"' id '"'@]
Remove the infix status attached to the identifier @id@ by a previous
@'#infix' '"' id '"'@ directive.

\item[@'#directory' '"' dir-name '"'@]
Add the named directory to the path of directories searched for
compiled module interface files. This is equivalent to the "-I"
command-line option to the batch compiler and the toplevel system.

\end{options}
