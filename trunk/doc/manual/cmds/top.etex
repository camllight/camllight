\chapter{The toplevel system (camllight)} \label{c:camllight}

This chapter describes the toplevel system for Caml Light, that
permits interactive use of the Caml Light system, through a
read-eval-print loop. In this mode, the system repeatedly reads Caml
Light phrases from the input, then typechecks, compile and evaluate
them, then prints the inferred type and result value, if any. The
system prints a "#" (sharp) prompt before reading each phrase.
A phrase can span several lines. Phrases are delimited by ";;"
(the final double-semicolon).

From the standpoint of the module system, all phrases entered at
toplevel are treated as the implementation of a module named "top".
Hence, all toplevel definitions are entered in the module "top".

\begin{unix}
The toplevel system is started by the command "camllight". Phrases are
read on standard input, results are printed on standard output, errors
on standard error. End-of-file on standard input terminates
"camllight" (see also the "quit" system function below).

The toplevel system does not perform line editing, but it can
easily be used in conjunction with an external line editor such as
"fep"; just run "fep -emacs camllight" or "fep -vi camllight".
Another option is to use "camllight" under Gnu Emacs, which gives the
full editing power of Emacs (see the directory "contrib/camlmode" in
the distribution).

At any point, the parsing, compilation or evaluation of the current
phrase can be interrupted by pressing "ctrl-C" (or, more precisely,
by sending the "intr" signal to the "camllight" process). This goes
back to the "#" prompt.
\end{unix}

\begin{mac}
The toplevel system is presented as the standalone Macintosh
application "Caml Light". This application does not require the
Macintosh Programmer's Workshop to run.

Once launched from the Finder, the application opens two windows,
``Caml Light Input'' and ``Caml Light Output''. Phrases are entered in
the ``Caml Light Input'' window. The ``Caml Light Output'' window
displays a copy of the input phrases as they are processed by the Caml
Light toplevel, interspersed with the toplevel responses. The 
``Return'' key sends the contents of the Input window to the Caml Light
toplevel. The ``Enter'' key inserts a newline without sending the
contents of the Input window. (This can be configured with the
``Preferences'' menu item.)

The contents of the input window can be edited at all times, with the
standard Macintosh interface. An history of previously entered phrases
is maintained, and can be accessed with the ``Previous entry''
(command-P) and ``Next entry'' (command-N) menu items.

To quit the "Caml Light" application, either select ``Quit'' from
the ``Files'' menu, or use the "quit" function described below.

At any point, the parsing, compilation or evaluation of the current
phrase can be interrupted by pressing ``command-period'', or by selecting the
item ``Interrupt Caml Light'' in the ``Caml Light'' menu. This goes
back to the "#" prompt.

\end{mac}

\begin{pc} 
The toplevel system is started by the command "caml". (The full name
"camllight" had to be truncated because of the well-known limitations
of MS-DOS.) Phrases are read on standard input, results are printed on
standard output, errors on standard error. The "quit" system function
terminates "caml".

A number of TSR line editors that provide line editing
and history facilities for the "command.com" command-line interpreter
also work in conjunction with "caml". Some TSR's that work: "dosedit",
"ced", "toddy". Some TSR's that don't work: "doskey" from the MS-DOS
distribution.

At any point, the parsing, compilation or evaluation of the current
phrase can be interrupted by pressing "ctrl-break" or "ctrl-C".
This goes back to the "#" prompt.
\end{pc}

\section{Options} \label{s:toplevel-options}

The following command-line options are recognized by the "caml" or
"camllight" commands.

\begin{options}

\item["-g"]
Start the toplevel system in debugging mode. This mode gives access to
values and types that are local to a module, that is, not exported by
the interface of the module. When debugging mode is off, these local
objects are not accessible (attempts to access them produce an
``Unbound identifier'' error). When debugging mode is on, these objects
become visible, just like the objects that are exported in the module
interface. In particular, values of abstract types are printed using
their concrete representations, and the functions local to a module
can be ``traced'' (see the "trace" function in section~\ref{s:control}).
This applies only to the modules that have been compiled in debugging mode
(either by the batch compiler with the "-g" option, or by the toplevel
system in debugging mode), that is, those modules that have an associated
".zix" file.

\item["-I" \var{directory}]
Add the given directory to the list of directories searched for
compiled interface files (".zi") and compiled object code files
(".zo"). By default, the current directory is searched first, then the
standard library directory. Directories added with "-I" are searched
after the current directory, but before the standard library
directory. When several directories are added with several "-I"
options on the command line, these directories are searched from right
to left (the rightmost directory is searched first, the leftmost is
searched last). Directories can also be added to the search path once
the toplevel is running with the "#directory" directive; see
chapter~\ref{c:extensions}.

\item["-lang" \var{language-code}]
Translate the toplevel messages to the specified language.
The \var{language-code} is "fr" for French, "es" for Spanish, "de" for
German, \ldots\ (See the file "camlmsgs.txt" in the Caml Light
standard library directory for a list of available languages.)
When an unknown language is specified, or no translation is available
for a message, American English is used by default.

\item["-O" \var{module-set}]
Specify which set of standard modules is to be implicitly ``opened''
when the toplevel starts. There are three module sets currently available:
\begin{options}
\item[cautious] provides the standard operations on integers,
floating-point numbers, characters, strings, arrays, \ldots, as well
as exception handling, basic input/output, \ldots Operations from the
"cautious" set perform range and bound checking on string and vector
operations, as well as various sanity checks on their arguments. 
\item[fast] provides the same operations as the "cautious" set, but
without sanity checks on their arguments. Programs compiled with
"-O fast" are therefore slightly faster, but unsafe.
\item[none] suppresses all automatic opening of modules. Compilation
starts in an almost empty environment. This option is not of general
use.
\end{options}
The default compilation mode is "-O cautious". See
chapter~\ref{c:stdlib} for a complete listing of the modules in the
"cautious" and "fast" sets.

\end{options}

\begin{unix} The following environment variables are also consulted:
\begin{options}
\item["LANG"] When set, control which language is used to print the
compiler messages (see the "-lang" command-line option).

\item["LC_CTYPE"] If set to "iso_8859_1", accented characters (from the
ISO Latin-1 character set) in string and character literals are
printed as is; otherwise, they are printed as decimal escape sequences
("\\"\var{ddd}).
\end{options}
\end{unix}

\begin{pc} The following environment variables are also consulted:
\begin{options}
\item["CAMLLIB"] Contain the path to the standard library directory.

\item["LANG"] When set, control which language is used to print the
compiler messages (see the "-lang" command-line option).
\end{options}
\end{pc}

\section{Toplevel control functions}
\label{s:control}

The standard library module "toplevel", opened by default when the
toplevel system is launched, provides a number of functions that
control the toplevel behavior, load files in memory, and trace program
execution.

\begin{options}

\item["quit ()"]\index{quit@\verb`quit`}%
Exit the toplevel loop and terminate the Caml Light command.

\item["include \""\var{filename}"\""]\index{include@\verb`include`}%
Read, compile and execute source phrases from the file \var{filename}.
The ".ml" extension is automatically added to \var{filename}, if not
present. This is textual inclusion: phrases are processed just as if
they were typed on standard input. In particular, global identifiers
defined by these phrases are entered in the module named "top", not in
a new module.

\item["load \""\var{filename}"\""]\index{load@\verb`load`}%
Load in memory the source code for a module implementation. Read,
compile and execute source phrases from file \var{filename}. The ".ml"
extension is automatically added to \var{filename}, if not present.
The "load" function behaves much like "include", except that a new module is
created, with name the base name of \var{filename}. Global identifiers
defined in file \var{filename} are entered in this module, instead of
the "top" module as in the case of "include". For instance,
assuming file "foo.ml" contains the single phrase
\begin{verbatim}
        let bar = 1;;
\end{verbatim}
executing "load \"foo\"" defines the identifier "foo__bar" with value 1.

Caveat: the loaded module is not automatically opened: the identifier
"bar" does not automatically complete to "foo__bar". To achieve this,
you must execute the directive "#open \"foo\"" afterwards.

\item["compile \""\var{filename}"\""]\index{compile@\verb`compile`}%
Compile the source code for a module implementation or interface
(".ml" or ".mli" file). Compilation proceeds as with the batch
compiler, and produces the same results as "camlc -c "\var{filename}.
If the toplevel system is in debugging mode (option "-g" or function
"debug_mode" below), the compilation is also performed in debugging mode,
as when giving the "-g" option to the batch compiler. The result of
the compilation is left in files (".zo", ".zi", ".zix"). The compiled
code is not loaded in memory.

\item["load_object \""\var{filename}"\""]\index{load_object@\verb`load_object`}%
Load in memory the compiled bytecode contained in file \var{filename}.
The ".zo" extension is automatically added to \var{filename}, if not
present. The bytecode file has been produced by the standalone
compiler "camlc". Global identifiers defined in file \var{filename}
are entered in their own module, not in the "top" module, just as with
the "load" function.

\item["trace \""\var{function-name}"\""]\index{trace@\verb`trace`}%
After the execution of "trace \"foo\"", all calls to the global
function named "foo" will be ``traced''. That is, the argument and the
result are displayed for each call, as well as the exceptions escaping
out of "foo", either raised by "foo" itself, or raised by one of the
functions called from "foo". If "foo" is a curried function, each
argument is printed as it is passed to the function.

\item["untrace \""\var{function-name}"\""]\index{untrace@\verb`untrace`}%
Executing "untrace \"foo\"" stops all tracing over the global
function named "foo".

\item["install_printer \""\var{printername}"\""]\index{install_printer@\verb`install_printer`}%
Register the function bound to the identifier \var{printername}
as a printer for objects whose types match the argument type of the
function. The toplevel loop will then call \var{printername} when it
has such an object to print. The printing function \var{printername}
must use the "format" library module (see section~\ref{s:format}),
otherwise its output will not be correctly located inside the values
printed by the toplevel loop.

\item["remove_printer \""\var{printername}"\""]\index{remove_printer@\verb`remove_printer`}%
Remove the given function from the table of toplevel printers.

\item["set_print_depth "\var{n}]\index{set_print_depth@\verb`set_print_depth`}%
Limit the printing of values to a maximal depth of \var{n}. The parts
of values whose depth exceed \var{n} are ellipsed (printed as "...").
A higher \var{n} shows more of the values; a lower \var{n} makes the
toplevel loop less verbose.

\item["debug_mode "\var{boolean-flag}]\index{debug_mode@\verb`debug_mode`}%
Set the debugging mode on ("debug_mode true") or off ("debug_mode false").
Executing "debug_mode true" is equivalent to starting the toplevel
system with the "-g" option. In debugging mode, values and types local to
a module (not exported by its interface) are visible, just like
the exported values and types. See the description of the "-g" option
in section~\ref{s:toplevel-options}.

\item["verbose_mode "\var{boolean-flag}]\index{verbose_mode@\verb`verbose_mode`}%
After executing "verbose_mode true", the compilations performed by
"compile" print the objects defined by the module, along with their
types, just as with the "-i" option to the batch compiler.
To revert to silent compilations, execute "verbose_mode false".

\item["cd \""\var{directory-name}"\""]\index{cd@\verb`cd`}%
Set the current working directory.

\item["directory \""\var{directory-name}"\""]\index{directory@\verb`directory`}%
Add the given directory to the search path for files. Same behavior as the
"-I" option to "camllight", or the "#directory" directive.

\end{options}

\section{The toplevel and the module system} \label{s:toplevel-modules}

Toplevel phrases can refer to identifiers defined in modules other
than the "top" module with the same mechanisms as for separately
compiled modules: either by using qualified identifiers
("modulename__localname"), or by using unqualified identifiers that
are automatically completed by searching the list of opened modules.
(See section~\ref{s:names}.) The modules opened at startup are given
in the documentation for the standard library. Other modules can be
opened with the "#open" directive.

However, before referencing a global variable from a module other than
the "top" module, a definition of that global variable must have been
entered in memory. At start-up, the toplevel system contains the
definitions for all the identifiers in the standard library. The
definitions for user modules can be entered with the "load" or
"load_object" functions described above. Referencing a global variable
for which no definition has been provided by "load" or "load_object"
results in the error ``{\tt Identifier foo__bar is referenced before
being defined}''. Since this is a tricky point, let us consider some
examples.

\begin{enumerate}
\item The library function "sub_string" is defined in module
"string". This module is part of the standard library, and is one of
the modules automatically opened at start-up. Hence, both phrases
\begin{verbatim}
        sub_string "qwerty" 1 3;;
        string__sub_string "qwerty" 1 3;;
\end{verbatim}
are correct, without having to use "#open", "load", or
"load_object".

\item The library function "printf" is defined in module
"printf". This module is part of the standard library, but it is not
automatically opened at start-up. Hence, the phrase
\begin{verbatim}
        printf__printf "%s %s" "hello" "world";;
\end{verbatim}
is correctly executed, while
\begin{verbatim}
        printf "%s %s" "hello" "world";;
\end{verbatim}
causes the error ``{\tt Variable printf is unbound}'', since none of
the currently opened modules define a global with local name "printf".
However,
\begin{verbatim}
        #open "printf";;
        printf "%s %s" "hello" "world";;
\end{verbatim}
executes correctly.

\item Assume the file "foo.ml" resides in the current directory, and
contains the single phrase
\begin{verbatim}
        let x = 1;;
\end{verbatim}
When the toplevel starts, references to "x" will cause the error ``{\tt
Variable x is unbound}''. References to "foo__x" will cause the error
``{\tt Cannot find file foo.zi}'', since the typechecker is attempting
to load the compiled interface for module "foo" in order to find the
type of "x". To load in memory the module "foo", just do:
\begin{verbatim}
        load "foo";;
\end{verbatim}
Then, references to "foo__x" typecheck and evaluate correctly. Since
"load" does not open the module it loads, references to "x" will still
fail with the error ``{\tt Variable x is unbound}''. You will have to
do
\begin{verbatim}
        #open "foo";;
\end{verbatim}
explicitly, for "x" to complete automatically into "foo__x".

\item Finally, assume the file "foo.ml" above
has been previously compiled with the "camlc -c" command. The current
directory therefore contains a compiled interface "foo.zi", claiming
that "foo__x" is a global variable with type "int", and a compiled
bytecode file "foo.zo", defining "foo__x" to have the value "1". 
When the toplevel starts, references to "foo__x" will cause the error 
``{\tt foo__x is referenced before being defined}''. In contrast with
case~3 above, the typechecker has succeeded in finding the compiled
interface for module "foo". But execution cannot proceed, because no
definition for "foo__x" has been entered in memory. To do so, execute:
\begin{verbatim}
        load_object "foo";;
\end{verbatim}
This loads the file "foo.zo" in memory, therefore defining "foo__x".
Then, references to "foo__x" evaluate correctly. As in case~3 above,
references to "x" still fail, because "load_object" does not open the
module it loads. Again, you will have to do
\begin{verbatim}
        #open "foo";;
\end{verbatim}
explicitly, for "x" to complete automatically into "foo__x".

\end{enumerate}

\section{Common errors}

This section describes and explains the most frequently encountered
error messages.

\begin{options}

\item[Cannot find file \var{filename}]
The named file could not be found in the current directory, nor in the
directories of the search path.

If \var{filename} has the format \var{mod}".zi", this
means the current phrase references identifiers from module \var{mod},
but you have not yet compiled an interface for module \var{mod}. Fix:
either "load" the file \var{mod}".ml", which will also create
in memory the compiled interface for module \var{mod}; or use "camlc" to
compile \var{mod}".mli" or \var{mod}".ml", creating the compiled
interface \var{mod}".zi", before you start the toplevel.

If \var{filename} has the format \var{mod}".zo", this
means you are trying to load with "load_object" a bytecode object file
that does not exist yet. Fix: compile \var{mod}".ml" with "camlc"
before you start the toplevel. Or, use "load" instead of "load_object"
to load the source code instead of a compiled object file.

If \var{filename} has the format \var{mod}".ml", this means "load" or
"include" could not find the specified source file. Fix: check the
spelling of the file name, or write it if it does not exist.

\item[\var{mod}"__"\var{name} is referenced before being defined]
You have neglected to load in memory an implementation for a module,
with "load" or "load_object". This is explained in full detail in
section~\ref{s:toplevel-modules} above.

\item[Corrupted compiled interface file \var{filename}]
See section~\ref{s:comp-errors}.

\item[Expression of type \nth{t}{1} cannot be used with type \nth{t}{2}]
See section~\ref{s:comp-errors}.

\end{options}

\section{Building custom toplevel systems: "camlmktop"}

The "camlmktop" command builds Caml Light toplevels that contain user
code preloaded at start-up. 

\begin{mac} This command is not available in the Macintosh version.
\end{mac}

\begin{pc} This command is not available in the PC versions.
\end{pc}

The "camlmktop" command takes as argument a set of ".zo" files, and
links them with the object files that implement the Caml Light
toplevel. The typical use is:
\begin{verbatim}
        camlmktop -o mytoplevel foo.zo bar.zo gee.zo
\end{verbatim}
This creates the bytecode file "mytoplevel", containing the Caml Light
toplevel system, plus the code from the three ".zo" files. To run this
toplevel, give it as argument to the "camllight" command:
\begin{verbatim}
        camllight mytoplevel
\end{verbatim}
This starts a regular toplevel loop, except that the code from
"foo.zo", "bar.zo" and "gee.zo" is already loaded in memory, just as
if you had typed:
\begin{verbatim}
        load_object "foo";;
        load_object "bar";;
        load_object "gee";;
\end{verbatim}
on entrance to the toplevel. The modules "foo", "bar" and "gee" are
not opened, though; you still have to do
\begin{verbatim}
        #open "foo";;
\end{verbatim}
yourself, if this is what you wish.

\section{Options}

The following command-line options are recognized by "camlmktop".

\begin{options}

\item["-custom"]
Link in ``custom runtime'' mode. See the corresponding option for
"camlc", in chapter~\ref{c:camlc}.

\item["-I" \var{directory}]
Add the given directory to the list of directories searched for
compiled object code files (".zo").

\item["-o" \var{exec-file}]
Specify the name of the toplevel file produced by the linker. The
default is "camltop.out".

\end{options}
