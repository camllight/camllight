(* The lexer definition *)

{
type token =
   Keyword of string * int * int
 | Commentaire of int * int
 | Open of int * int
 | Dontcare
 | EOF
;;
exception Lexical_error of string * int * int
;;
  

(* For nested comments *)

let comment_depth = ref 0;;

(* The table of keywords *)

let keyword_table = ref (set__empty compare_strings)
;;
let add_keyword k = 
  keyword_table := set__add k !keyword_table
;;
let remove_keyword k = 
  keyword_table := set__remove k !keyword_table
;;


do_list add_keyword [
  "and";
  "as";
  "begin";
  "do";
  "done";
  "downto";
  "else";
  "end";
  "exception";
  "for";
  "fun";
  "function";
  "if";
  "in";
  "let";
  "match";
  "mutable";
  "not";
  "of";
  "or";
  "prefix";
  "rec";
  "then";
  "to";
  "try";
  "type";
  "value";
  "when";
  "where";
  "while";
  "with"
];;

let add_infix = add_keyword
;;

let remove_infix = remove_keyword
;;

do_list add_infix
  ["quo"; "mod"; "land"; "lor"; "lxor"; "lsl"; "lsr"; "asr"]
;;

(* To buffer string literals *)

let initial_string_buffer = create_string 256;;
let string_buff = ref initial_string_buffer;;
let string_index = ref 0;;

let reset_string_buffer () =
  string_buff := initial_string_buffer;
  string_index := 0;
  ()
;;

let store_string_char c =
  if !string_index >= string_length (!string_buff) then begin
    let new_buff = create_string (string_length (!string_buff) * 2) in
      blit_string (!string_buff) 0 new_buff 0 (string_length (!string_buff));
      string_buff := new_buff
  end;
  set_nth_char (!string_buff) (!string_index) c;
  incr string_index
;;

let get_stored_string () =
  let s = sub_string (!string_buff) 0 (!string_index) in
    string_buff := initial_string_buffer;
    s
;;

(* To translate escape sequences *)

let char_for_backslash = function
#ifdef macintosh
    `n` -> `\013`
  | `r` -> `\010`
#else
    `n` -> `\010`
  | `r` -> `\013`
#endif
  | `b` -> `\008`
  | `t` -> `\009`
  | c   -> c
;;

let char_for_decimal_code lexbuf i =
  char_of_int(100 * (int_of_char(get_lexeme_char lexbuf i) - 48) +
               10 * (int_of_char(get_lexeme_char lexbuf (i+1)) - 48) +
                    (int_of_char(get_lexeme_char lexbuf (i+2)) - 48))
;;

let saved_string_start = ref 0;;

}

#ifdef unix
#define ACCENTED `\192`-`\214` `\216`-`\246` `\248`-`\255`
#endif
#ifdef macintosh
#define ACCENTED `\128`-`\159` `\174`-`\175` `\190`-`\191` `\203`-`\207` `\216`-`\217` `\222`-`\223` `\229`-`\239` `\241`-`\244`
#endif
#ifdef msdos
#define ACCENTED `\128`-`\154` `\160`-`\165`
#endif

#define SYMBOLS \
    `!` `$` `%` `&` `*` `+` `-` `.` `/` `:` `;` \
    `<` `=` `>` `?` `@` `^` `|` `~`

rule main = parse
    [` ` `\010` `\013` `\009` `\012`] +
      { main lexbuf }
  | [`A`-`Z` `a`-`z` ACCENTED ]
    ( `_` ? [`A`-`Z` `a`-`z` ACCENTED `'` (*'*) `0`-`9` ] ) *
      { let s = get_lexeme lexbuf in
      	 if set__mem s !keyword_table
	 then Keyword (s, get_lexeme_start lexbuf, get_lexeme_end lexbuf)
	 else Dontcare
      }
  | [`0`-`9`]+
    | `0` [`x` `X`] [`0`-`9` `A`-`F` `a`-`f`]+
    | `0` [`o` `O`] [`0`-`7`]+
    | `0` [`b` `B`] [`0`-`1`]+
      { Dontcare }
  | [`0`-`9`]+ (`.` [`0`-`9`]*)? ([`e` `E`] [`+` `-`]? [`0`-`9`]+)?
      { Dontcare }
  | "\""
      { let _ = string lexbuf in Dontcare }
  | "`"
      { char lexbuf }
  | "(*"
      { comment_depth := 1; 
      	let thestart = get_lexeme_start lexbuf in
      	let theend = comment lexbuf in
      	  Commentaire (thestart,theend)} 
  | "#" [` ` `\010` `\013` `\009` `\012`]* "open" 
        [` ` `\010` `\013` `\009` `\012`]* "\""
      { let string_start = get_lexeme_end lexbuf in
      	let string_end = string lexbuf in
        Open (string_start,pred string_end) }
  | "#" { Dontcare }
  | "&" { Dontcare }
  | "'" { Dontcare }
  | "(" { Dontcare }
  | ")" { Dontcare }
  | "*" { Dontcare }
  | "," { Dontcare }
  | "->" { Dontcare }
  | "." { Dontcare }
  | ".." { Dontcare }
  | ".(" { Dontcare }
  | ".[" { Dontcare }
  | ":" { Dontcare }
  | "::" { Dontcare }
  | ":=" { Dontcare }
  | ";" { Dontcare }
  | ";;" { Dontcare }
  | "<-" { Dontcare }
  | "=" { Dontcare }
  | "==" { Dontcare }
  | ">]" { Dontcare }
  | "[" { Dontcare }
  | "[|" { Dontcare }
  | "[<" { Dontcare }
  | "]" { Dontcare }
  | "_" { Dontcare }
  | "__" { Dontcare }
  | "{" { Dontcare }
  | "|" { Dontcare }
  | "|]" { Dontcare }
  | "}" { Dontcare }
  | "/\\" { Dontcare }
  | "\\/" { Dontcare }

  | "!="    { Dontcare }
  | "-"     { Dontcare }
  | "-."    { Dontcare }

  | [ `!` `?` ] [ SYMBOLS ] *
            { Dontcare }
  | [ `=` `<` `>` `@` `^` `|` `&` `~` ] [ SYMBOLS ] *
            { Dontcare }
  | [ `+` `-` ] [ SYMBOLS ] *
            { Dontcare }
  | "**" [ SYMBOLS ] *
            { Dontcare }
  | [ `*` `/` `%` ] [ SYMBOLS ] *
            { Dontcare }
  | eof { EOF }
  | _
      { raise (Lexical_error("illegal character",
                            get_lexeme_start lexbuf, get_lexeme_end lexbuf)) }

and comment = parse
    "(*"
      { comment_depth := succ !comment_depth; comment lexbuf }
  | "*)"
      { comment_depth := pred !comment_depth;
        if !comment_depth > 0 then comment lexbuf
      	else get_lexeme_end lexbuf }
  | eof
      { raise (Lexical_error("comment not terminated", -1, -1)) }
  | _
      { comment lexbuf }

and char = parse
    [^ `\\` `\``] "`"
      { Dontcare }
  | `\\` [`\\` `\`` `n` `t` `b` `r`] "`"
      { Dontcare }
  | `\\` [`0`-`9`] [`0`-`9`] [`0`-`9`] "`"
      { Dontcare }
  | _
      { raise (Lexical_error("bad character constant",
                            get_lexeme_start lexbuf, get_lexeme_end lexbuf)) }

and string = parse
    `"`
      { get_lexeme_end lexbuf }
  | `\\` [` ` `\010` `\013` `\009` `\026` `\012`] +
      { string lexbuf }
  | `\\` [`\\` `"` `n` `t` `b` `r`]
      { string lexbuf }
  | `\\` [`0`-`9`] [`0`-`9`] [`0`-`9`]
      { string lexbuf }
  | eof
      { raise (Lexical_error("string not terminated", -1, -1)) }
  | _
      { string lexbuf }
;;
