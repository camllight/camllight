############## Standard Tk Widgets and functions ##############
## $Id$
type Widget external
type symbol external

##### Some types for standard options of widgets
type Color external   # because required by Cursor, external

type Relief { 
   Raised ["raised"]
   Sunken ["sunken"]
   Flat   ["flat"]
   Ridge  ["ridge"]
   Groove ["groove"]
}

type Anchor { 
    NW ["nw"]       N ["n"]           NE ["ne"]
    W  ["w"]   Center ["center"]      E  ["e"]
    SW ["sw"]       S ["s"]           SE ["se"]
}

type Orientation { 
    Vertical ["vertical"]
    Horizontal ["horizontal"] 
}

# builtins types 
type TextVariable external # textvariable
type Units external	# builtin_GetPixel
type Bitmap external    # builtin_GetBitmap
type Cursor external    # builtina_GetCursor


### options(n)
# define the standard options, so they can be used implicitly further on
subtype option(standard) {
   ActiveBackground		["-activebackground"; Color]
   ActiveBorderWidth		["-activeborderwidth"; Units]
   ActiveForeground		["-activeforeground"; Color]
   Anchor			["-anchor"; Anchor]
   Background			["-background"; Color]
   Bitmap			["-bitmap"; Bitmap]
   Borderwidth			["-borderwidth"; Units]
   Cursor			["-cursor";  Cursor]
   # cheat with NamedColor ""
   DisabledForeground		["-disabledforeground"; Color]
   ExportSelection		["-exportselection"; bool]
   Font				["-font"; string]
   Foreground			["-foreground"; Color]
   Geometry			["-geometry"; string]     # Too variable to encode
   HighlightBackground          ["highllightbackground"; Color]
   HighlightColor               ["-highlightcolor"; Color]
   HighlightThickness           ["highlightthickness"; int]
   InsertBackground		["-insertbackground"; Color]
   InsertBorderWidth		["-insertborderwidth"; Units]
   InsertOffTime		["-insertofftime"; int]   # Positive only
   InsertOnTime			["-insertontime"; int]    # Idem
   InsertWidth			["-insertwidth"; Units]
   Orientation			["-orient"; Orientation]
   PadX				["-padx"; Units]
   PadY				["-pady"; Units]
   Relief			["-relief"; Relief]
   RepeatDelay			["-repeatdelay"; int]
   RepeatInterval		["-repeatinterval"; int]
   SelectBackground		["-selectbackground"; Color]
   SelectBorderWidth		["-selectborderwidth"; Units]
   SelectForeground		["-selectforeground"; Color]
   SetGrid			["-setgrid"; bool]
   Text				["-text"; string]
   TextVariable			["-textvariable"; TextVariable]
   UnderlinedChar		["-underline"; int]
   XScrollCommand		["-xscrollcommand"; function(float, float)]   # Before 4.0 : (int,int,int,int)
   YScrollCommand		["-yscrollcommand"; function(float, float)]   # Before 4.0 : (int,int,int,int)
   TakeFocus                    ["-takefocus"; bool]
   WrapLength                   ["-wraplength"; int]
}


# for messages dans canvas text
type Justification { 
   Justify_Left   ["left"]
   Justify_Center ["center"]
   Justify_Right  ["right"]
}


# New for TK 4.0
type Visual {
    ClassVisual [[string; int]]
    DefaultVisual ["default"]
    WidgetVisual [widget]
    BestDepth [["best"; int]]
    Best ["best"]
    }
# End new

widget frame {
   option Background
   option Borderwidth
   option Cursor
   # option Geometry       Not supported by TK 4.0
   option Relief
   option Height ["-height"; Units]
   option Width  ["-width"; Units]
   option Class  ["-class"; string]
   # New for TK 4.0
   option Colormap ["-colormap"; string]
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option TakeFocus
   option Visual ["-visual"; Visual]
   # End new

   # -class not checked  
   function () configure [widget(frame); "configure"; option(frame) list]
   function (string) configure_get [widget(frame); "configure"]
   }

type State { 
   Normal ["normal"]
   Active ["active"]
   Disabled ["disabled"]
}

widget button {
   option ActiveBackground
   option ActiveForeground
   option Anchor
   option Background
   option Bitmap
   option Borderwidth
   option Cursor
   option DisabledForeground
   option Font
   option Foreground
   option PadX
   option PadY
   option Relief
   option Text
   option TextVariable
   option Command ["-command"; function ()]
   option Height ["-height"; Units]
   option State ["-state"; State]
   option Width ["-width"; Units]
   # New for TK V4.0
   option TakeFocus ["-takefocus"; bool]
   option UnderlinedChar
   option WrapLength ["-wraplength"; int]
   option ImageBitmap ["-image"; ImageBitmap]   # Because 2 types for images
   option ImagePhoto ["-image"; ImagePhoto]


   # function () activate [widget(button); "activate"]  Not supported by TK 4.0
   # function () deactivate [widget(button); "deactivate"]  Not supported by TK 4.0
   function () flash      [widget(button); "flash"]
   function () invoke     [widget(button); "invoke"]
   function () configure  [widget(button); "configure"; option(button) list]
   function (string) configure_get [widget(button); "configure"]
   }




widget checkbutton {	
   option ActiveBackground
   option ActiveForeground
   option Anchor
   option Background
   option Bitmap
   option Borderwidth
   option Cursor
   option DisabledForeground
   option Font
   option Foreground
   option PadX
   option PadY
   option Relief
   option Text
   option TextVariable
   option Command  ["-command"; function ()]
   option Height   ["-height"; Units]
   option OffValue ["-offvalue"; string]
   option OnValue  ["-onvalue"; string]
   # option Selector ["-selector"; Color]   Not supported by TK 4.0
   option State    ["-state"; State]
   option Width    ["-width"; Units]
   option Variable ["-variable"; TextVariable]
   # New for TK 4.0
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option ImageBitmap    # Because 2 types for images
   option ImagePhoto
   option TakeFocus
   option WrapLength
   option UnderlinedChar
   option IndicatorOn ["-indicatoron"; bool]
   option SelectColor ["-selectcolor"; Color]
   option SelectImageBitmap ["-selectimage"; ImageBitmap]   # Because 2 types for images
   option SelectImagePhoto ["-selectimage"; ImagePhoto]
   # End new


   # function () activate [widget(checkbutton); "activate"]        Not supported by TK 4.0
   function () configure [widget(checkbutton); "configure"; option(checkbutton) list]
   function (string) configure_get [widget(checkbutton); "configure"]
   # function () deactivate [widget(checkbutton); "deactivate"]    Not supported byt TK 4.0
   function () deselect [widget(checkbutton);  "deselect"]
   function () flash [widget(checkbutton); "flash"]
   function () invoke [widget(checkbutton); "invoke"]
   function () select [widget(checkbutton); "select"]
   function () toggle [widget(checkbutton); "toggle"]
   }

widget radiobutton {
   option ActiveBackground
   option ActiveForeground
   option Anchor
   option Background
   option Bitmap
   option Borderwidth
   option Cursor
   option DisabledForeground
   option Font
   option Foreground
   option PadX
   option PadY
   option Relief
   option Text
   option TextVariable
   option Command ["-command"; function()]
   option Height  ["-height"; Units]
   # option Selector  Not supported by TK 4.0
   option State
   option Value   ["-value"; string]
   option Variable
   option Width   ["-width"; Units]
   # New for TK 4.0
   option UnderlinedChar
   option TakeFocus
   option WrapLength
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option ImageBitmap
   option ImagePhoto
   option IndicatorOn
   option SelectColor
   option SelectImageBitmap
   option SelectImagePhoto
   # End new

   # function () activate [widget(radiobutton); "activate"]         Not supported by TK 4.0
   function () configure [widget(radiobutton); "configure"; option(radiobutton) list]
   function (string) configure_get [widget(radiobutton); "configure"]
   # function () deactivate [widget(radiobutton); "deactivate"]     Not supported by TK 4.0
   function () deselect [widget(radiobutton); "deselect"]
   function () flash [widget(radiobutton); "flash"]
   function () invoke [widget(radiobutton); "invoke"]
   function () select [widget(radiobutton); "select"]
   }

type Index external   # builtin_index
# Almost equal to
#   Number (int)
#   End "end"
#   Insert "insert"
#   SelFirst "sel.first"
#   SelLast "sel.last" 
#   At "@" (int)
#   AtXY "@" (int)

# Defined internally
# subtype Index(entry) {
#    Number End Insert SelFirst SelLast At
# }

widget entry {
   option Background
   option Borderwidth
   option Cursor
   option ExportSelection
   option Font
   option Foreground
   option InsertBackground
   option InsertBorderWidth
   option InsertOffTime
   option InsertOnTime
   option InsertWidth
   option Relief
   # option ScrollCommand   Not Supported by TK 4.0 and not supplied for CamlTk with TK 3.6
   option SelectBackground
   option SelectBorderWidth
   option SelectForeground
   option TextVariable
   option XScrollCommand
   option State     ["-state"; State]
   option TextWidth ["-width"; int]
   # New for TK 4.0
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option TakeFocus
   option Justify ["-justify"; Justification]
   option XScrollCommand
   option Show ["-show"; char]
   # End new


   function () configure [widget(entry); "configure"; option(entry) list]
   function (string) configure_get [widget(entry); "configure"]
   function () delete [widget(entry); "delete"; Index(entry); Index(entry)]
   function (string) get [widget(entry); "get"]
   function () icursor [widget(entry); "icursor"; Index(entry)]
   function (int) index [widget(entry); "index"; Index(entry)]
   function () insert [widget(entry); "insert"; Index(entry); string]
   function () scan_mark [widget(entry); "scan"; "mark"; int]
   function () scan_dragto [widget(entry); "scan"; "dragto"; int]
   # select_xx Not supported by TK 4.0
   # New for TK 4.0
   function () selection_adjust [widget(entry); "selection"; "adjust"; Index(entry)]
   function () selection_clear [widget(entry); "selection"; "clear" ]
   function () selection_from [widget(entry); "selection"; "from"; Index(entry)]
   function () selection_to [widget(entry); "selection"; "to"; Index(entry)]
   function (int) selection_present [widget(entry); "selection"; "present"]
   function () selection_range [widget(entry); "selection"; "range"; Index(entry) ; Index(entry)]
   function () xview_scroll [widget(entry); "xview"; ScrollValue]
   function (float, float) get_xview [widget(entry); "xview"]
   # End new
   function () xview [widget(entry); "xview"; Index(entry)]
   }


######################### Canvases
# type TagOrId external # because of builtins
type TagOrId {
  Tag [string]
  Id  [int]
}

# type SearchSpec external	# builtin_canvas
type SearchSpec {
  Above ["above"; TagOrId]
  All	["all"]
  Below ["below"; TagOrId]
  Closest ["closest"; int; int]
  Enclosed ["enclosed"; int;int;int;int]
  Overlapping ["overlapping"; int;int;int;int]
  Withtag ["withtag"; TagOrId]
}


# defined internally
# subtype Index(canvas) {
#   Number End Insert SelFirst SelLast AtXY
#   }


type ArcStyle {
   Pieslice ["pieslice"]
   Chord ["chord"]
   Arc ["arc"]
}

subtype option (arc) {
   Extent ["-extent"; float]
   FillColor ["-fill"; Color]
   Outline ["-outline"; Color]
   # New for TK 4.0
   OutLineStipple ["-outlinestipple"; Bitmap]
   # End new
   Start ["-start"; float]
   Stipple ["-stipple"; Bitmap]
   ArcStyle ["-style"; ArcStyle]
   Tags ["-tags"; TagOrId list]
   Width
  }

subtype option (bitmap) {
   Anchor
   Background
   Bitmap
   Foreground
   Tags
}

# New for TK 4.0
subtype option (imageitem) {
   Anchor ["-anchor"; Anchor]
   ImagePhoto ["-image"; ImagePhoto]
   ImageBitMap ["-image"; ImageBitmap]
   Tags
}
# End new

type ArrowStyle { 
   Arrow_None ["none"]
   Arrow_First ["first"]
   Arrow_Last ["last"]
   Arrow_Both ["both"]
}

type CapStyle { 
   CS_Butt ["butt"]
   CS_Projecting ["projecting"]
   CS_Round ["round"]
}

type JoinStyle { 
   JS_Bevel ["bevel"]
   JS_Miter ["miter"]
   JS_Round ["round"]
}

subtype option(line) {
   ArrowStyle ["-arrow"; ArrowStyle]
   ArrowShape ["-arrowshape"; [Units; Units; Units]]
   CapStyle ["-capstyle"; CapStyle]
   FillColor
   JoinStyle ["-joinstyle"; JoinStyle]
   Smooth ["-smooth"; bool]
   SplineSteps ["-splinesteps"; int]
   Stipple ["-stipple"; Bitmap]
   Tags
   Width
   }

subtype option(oval) {
   FillColor
   Outline
   Stipple
   Tags
   Width
   }

subtype option(polygon) {
   FillColor
   Smooth
   # New for TK 4.0
   Outline
   Width
   # End new
   SplineSteps
   Stipple
   Tags
   }

subtype option(rectangle) {
   FillColor
   Outline
   Stipple
   Tags
   Width
   }

subtype option(canvastext) {
   Anchor
   FillColor
   Font
   Justify ["-justify"; Justification]
   Stipple
   Tags
   Text
   Width
   }

subtype option(window) {
   Anchor
   Height
   Tags
   Width
   Window ["-window"; widget]
   }

type ColorMode { 
   Colormode ["color"]
   Gray ["gray"]
   Mono ["mono"]
}
subtype option(postscript) {
   Colormap ["-colormap"; string]
   Colormode ["-colormode"; ColorMode]
   # File: not used
   Fontmap ["-fontmap"; string]
   Height
   PageAnchor ["-pageanchor"; Anchor]
   PageHeight ["-pageheight"; Units]
   PageWidth ["-pagewidth"; Units]
   PageX ["-pagex"; Units]
   PageY ["-pagey"; Units]
   Rotate ["-rotate"; bool]
   Width
   X ["-x"; Units]
   Y ["-y"; Units]
   }

type CanvasItem {
   Arc_item ["arc"]
   Line_item ["line"]
   Rectangle_item ["rectangle"]
   Oval_item ["oval"]
   Bitmap_item ["bitmap"]
   Polygon_item ["polygon"]
   Text_item ["text"]
   Window_item ["window"]
}

widget canvas {
   option Background
   option Borderwidth
   option Cursor
   option InsertBackground
   option InsertBorderWidth
   option InsertOffTime
   option InsertOnTime
   option InsertWidth
   option Relief
   option SelectBackground
   option SelectBorderWidth
   option SelectForeground
   option XScrollCommand
   option YScrollCommand
   option CloseEnough ["-closeenough"; float]
   option Confine ["-confine"; bool]
   option Height ["-height"; Units]
   # option ScrollIncrement ["-scrollincrement"; Units]       Not supported by TK V 4.0
   option ScrollRegion ["-scrollregion"; [Units;Units;Units;Units]]
   option Width ["-width"; Units]
   # New for TK V 4.0
   option HighlightColor ["-highlightcolor"; Color]
   option HighlightBackground ["highllightbackground"; Color]
   option HighlightThickness ["highlightthickness"; int]
   option TakeFocus
   option xScrollIncrement ["-xscrollincrement"; float]
   option yScrollIncrement ["-yscrollincrement"; float]
   # End new


   function () addtag [widget(canvas); "addtag"; TagOrId; SearchSpec]     # Tag only
   # bbox not fully supported. should be builtin because of ambiguous result
   # function (float, float, float, float) bbox [widget(canvas); "bbox"; TagOrId list]
   function (int list) bbox [widget(canvas); "bbox"; TagOrId list]
   # bind is builtin
   function (int) canvasx [widget(canvas); "canvasx"; Units; Units]
   function (int) canvasy [widget(canvas); "canvasy"; Units; Units]
   function () configure [widget(canvas); "configure"; option (canvas) list]
   function (string) configure_get [widget(canvas); "configure"]
   # TODO: check result
   function (int list) coords_get [widget(canvas); "coords"; TagOrId]
   function () coords_set [widget(canvas); "coords"; TagOrId; Units list]
   function () dchars [widget(canvas); "dchars"; TagOrId; Index(canvas); Index(canvas)]
   function () delete [widget(canvas); "delete"; TagOrId list]
   function () dtag [widget(canvas); "dtag"; TagOrId; TagOrId]     # 2d arg is tag only 
   function (TagOrId list) find [widget(canvas); "find"; SearchSpec]
   function () focus_reset [widget(canvas); "focus" ]
   function () focus [widget(canvas); "focus"; TagOrId]
   function (TagOrId list) gettags [widget(canvas); "gettags"; TagOrId]
   function () icursor [widget(canvas); "icursor"; TagOrId; Index(canvas)]
   function (int) index [widget(canvas); "index"; TagOrId; Index(canvas)]
   function () insert [widget(canvas); "insert"; TagOrId; Index(canvas); string]
   function (string) item_configure_get [widget(canvas); "itemconfigure"; TagOrId]
   function () arc_configure [widget(canvas); "itemconfigure"; TagOrId; option (arc) list]
   function () bitmap_configure [widget(canvas); "itemconfigure"; TagOrId; option (bitmap) list]
   function () line_configure [widget(canvas); "itemconfigure"; TagOrId; option (line) list]
   function () oval_configure [widget(canvas); "itemconfigure"; TagOrId; option (oval) list]
   function () polygon_configure [widget(canvas); "itemconfigure"; TagOrId; option (polygon) list]
   function () rectangle_configure [widget(canvas); "itemconfigure"; TagOrId; option (rectangle) list]
   function () text_configure [widget(canvas); "itemconfigure"; TagOrId; option (canvastext) list]
   function () window_configure [widget(canvas); "itemconfigure"; TagOrId; option (window) list]
   function () lower [widget(canvas); "lower"; TagOrId; TagOrId]
   function () lowest [widget(canvas); "lower"; TagOrId]
   function () move [widget(canvas); "move"; TagOrId; Units; Units]
   function (string) postscript [widget(canvas); "postscript"; option (postscript) list]
   function () postscript_file [widget(canvas); "postscript"; "-file"; string; option(postscript) list]
   # do not use raise !
   function () raiseabove [widget(canvas); "raise"; TagOrId; TagOrId]
   function () raisetop [widget(canvas); "raise"; TagOrId]
   function () scale [widget(canvas); "scale"; TagOrId; Units; Units; float; float]
   function () scan_mark [widget(canvas); "scan"; "mark"; int; int]
   function () scan_dragto [widget(canvas); "scan"; "dragto"; int; int]
   function () select_adjust [widget(canvas); "select"; "adjust"; TagOrId ;Index(canvas)]
   function () select_clear [widget(canvas); "select"; "clear" ]
   function () select_from [widget(canvas); "select"; "from"; TagOrId; Index(canvas)]
   function (TagOrId) select_item [widget(canvas); "select"; "item" ]
   function () select_to  [widget(canvas); "select"; "to"; TagOrId; Index(canvas)]
   function (CanvasItem) typeof [widget(canvas); "type"; TagOrId]
   function () xview [widget(canvas); "xview"; Index(canvas)]
   function () yview [widget(canvas); "yview"; Index(canvas)]
   # New for TK V4.0
   function () xview_scroll [widget(canvas); "xview"; ScrollValue]
   function () yview_scroll [widget(canvas); "yview"; ScrollValue]
   # End new
   function (TagOrId) createarc [widget(canvas); "create"; "arc"; Units; Units; Units; Units; option (arc) list]
   function (TagOrId) createbitmap [widget(canvas); "create"; "bitmap"; Units; Units; option (bitmap) list]
   function (TagOrId) createline [widget(canvas); "create"; "line"; Units list; option (line) list]
   function (TagOrId) createoval [widget(canvas); "create"; "oval"; Units; Units; Units; Units; option (oval) list]
   function (TagOrId) createpolygon [widget(canvas); "create"; "polygon"; Units list; option (polygon) list]
   function (TagOrId) createrectangle [widget(canvas); "create"; "rectangle"; Units; Units; Units; Units; option (rectangle) list]
   function (TagOrId) createtext [widget(canvas); "create"; "text"; Units; Units; option (canvastext) list]
   function (TagOrId) createwindow [widget(canvas); "create"; "window"; Units; Units; option (window) list]
   function () move [widget(canvas); "move"; TagOrId; Units; Units]
   }

widget label {
   option Anchor
   option Background
   option Bitmap
   option Borderwidth
   option Cursor
   option Font
   option Foreground
   option PadX
   option PadY
   option Relief
   option Text
   option TextVariable
   option Height
   # use the option corresponding to the label contents (echh)
   option Width
   option TextWidth
   # New for TK 4.0
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option TakeFocus
   option WrapLength
   option UnderlinedChar
   option Justify
   option ImageBitmap        # Because 2 types for images
   option ImagePhoto
   # End new


   function () configure [widget(label); "configure"; option (label) list]
   function (string) configure_get [widget(label); "configure"]
   }

# Defined internally
# subtype Index(listbox) {
#   Number End  
#}

# New for TK 4.0
type SelectModeType {
   Single ["single"]
   Browse ["browse"]
   Multiple ["multiple"]
   Extended ["extended"]
   }
# End new


widget listbox {
   option Background
   option Borderwidth
   option Cursor
   option ExportSelection
   option Foreground
   option Font
   # option Geometry    Not supported by TK 4.0
   option Relief
   option SelectBackground
   option SelectBorderWidth
   option SelectForeground
   option SetGrid
   option XScrollCommand
   option YScrollCommand
   # New for TK 4.0
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option TakeFocus
   option Height
   option Width
   option SelectMode ["-selectmode"; SelectModeType]
   # End new


   function () configure [widget(listbox); "configure"; option(listbox) list]
   function (string) configure_get [widget(listbox); "configure" ]
   # TODO: pb with returning empty list ?
   function (Index list) curselection [widget(listbox); "curselection" ]
   function () delete [widget(listbox); "delete"; Index(listbox); Index(listbox)]
   function (string) get [widget(listbox); "get"; Index(listbox)]
   function () insert [widget(listbox); "insert"; Index(listbox); string list]
   function (Index) nearest [widget(listbox); "nearest"; int]
   function () scan_mark [widget(listbox); "scan"; "mark"; int; int]
   function () scan_dragto [widget(listbox); "scan"; "dragto"; int; int]
   # function () select_adjust [widget(listbox); "select"; "adjust"; Index(listbox)]  Not supported by TK 4.0
   # function () select_clear [widget(listbox); "select"; "clear" ]                  Not supported by TK 4.0
   # function () select_from [widget(listbox); "select"; "from"; Index(listbox)]    Not supported by TK 4.0
   # function () select_to [widget(listbox); "select"; "to"; Index(listbox)]       Not supported by TK 4.0
   function (int) size [widget(listbox); "size"]
   # ATTENTION: Use this for manual scrolling (without scrollbar)
   function () xview [widget(listbox); "xview"; Index(listbox)]
   function () yview [widget(listbox); "yview"; Index(listbox)]
   function () SingleSelect ["tk_listboxSingleSelect"; widget(listbox) list]
   # New for Tk V4.0
   # ATTENTION: Use this when linking with scrollbar
   function () xview_scroll [widget(listbox); "yview"; ScrollValue]
   function () yview_scroll [widget(listbox); "yview"; ScrollValue]
   # End ATTENTION
   function () activate [widget(listbox); "activate"; Index(listbox)]
   # For below: Bbox returns an int list instead of 4 int because if it doesn't find the text
   # at the asked position, it returns nothing (empty string)...
   function (int list) Bbox [widget(listbox); "bbox"; Index(listbox)]
   function (int) Index2Number [widget(listbox); "index"; Index(listbox)]
   function () see [widget(listbox); "see"; Index(listbox)]
   function () selection_anchor [widget(listbox); "selection"; "anchor"; Index(listbox)]
   function () selection_clear [widget(listbox); "selection"; "clear"; Index(listbox); Index(listbox)]
   function (bool) selection_includes [widget(listbox); "selection"; "includes"; Index(listbox)]
   function () selection_set [widget(listbox); "selection"; "set"; Index(listbox); Index(listbox)]
   # End new
   }

widget menubutton {
   option ActiveBackground
   option ActiveForeground
   option Anchor
   option Background
   option Bitmap
   option Borderwidth
   option Cursor
   option DisabledForeground
   option Font
   option Foreground
   option PadX
   option PadY
   option Relief
   option Text
   option TextVariable
   option UnderlinedChar
   option Height
   option Menu ["-menu"; widget(menu)]
   option State ["-state"; State]
   option Width
   # New for TK 4.0
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option TakeFocus
   option WrapLength
   option ImageBitmap        # Because 2 types for images
   option ImagePhoto
   option Justify
   option IndicatorOn
   # End new


   function () configure [widget(menubutton); "configure"; option(menubutton) list]
   function (string) configure_get [widget(menubutton); "configure" ]
   function () activate [widget(menubutton); "activate" ]
   # function () deactivate [widget(menubutton); "deactivate" ]    Not supported by TK 4.0
   }

type MenuIndex external


widget menu {
   option ActiveBackground
   option ActiveBorderWidth
   option ActiveForeground
   option Background
   option Borderwidth
   option Cursor
   option DisabledForeground
   option Font
   option Foreground
   option PostCommand ["-postcommand"; function()]
   # option Selector                 Not supported by TK 4.0
   # New for TK 4.0
   option Relief
   option TakeFocus
   option SelectColor ["-selectcolor"; Color]
   option TearOff ["-tearoff"; bool]
   # End new


   function () activate [widget(menu); "activate"; MenuIndex]
   function () add_cascade [widget(menu); "add"; "cascade"; option(menucascade) list]
   function () add_checkbutton [widget(menu); "add"; "checkbutton"; option(menucheck) list]
   function () add_command [widget(menu); "add"; "command"; option(menucommand) list]
   function () add_radiobutton [widget(menu); "add"; "radiobutton"; option(menuradio) list]
   function () add_separator [widget(menu); "add"; "separator"]
   function () configure [widget(menu); "configure"; option(menu) list]
   function () delete [widget(menu); "delete"; MenuIndex; MenuIndex]
   # function () disable [widget(menu); "disable"; MenuIndex]	Not supported by TK 4.0
   # function () enable [widget(menu); "enable"; MenuIndex]     Not supported by TK 4.0
   function () entryconfigure_cascade [widget(menu); "entryconfigure"; MenuIndex; option (menucascade) list]
   function () entryconfigure_checkbutton [widget(menu); "entryconfigure"; MenuIndex; option (menucheck) list]
   function () entryconfigure_command [widget(menu); "entryconfigure"; MenuIndex; option (menucommand) list]
   function () entryconfigure_radiobutton [widget(menu); "entryconfigure"; MenuIndex; option (menuradio) list]
   function (string) entryconfigure_get [widget(menu); "entryconfigure"; MenuIndex]
   # none not supported
   function (int) index [widget(menu); "index"; MenuIndex]
   function (string) invoke [widget(menu); "invoke"; MenuIndex]
   function () post [widget(menu); "post"; int; int]
   function () unpost [widget(menu); "unpost"]
   function (int) yposition [widget(menu); "yposition"; MenuIndex]
   # New for TK 4.0
   function () insert_cascade [widget(menu); "insert"; widget(menu); "cascade"; option(menucascade) list]
   function () insert_checkbutton [widget(menu); "insert"; widget(menu); "checkbutton"; option(menucheck) list]
   function () insert_command [widget(menu); "insert"; widget(menu); "command"; option(menucommand) list]
   function () insert_radiobutton [widget(menu); "insert"; widget(menu); "radiobutton"; option(menuradio) list]
   function () insert_separator [widget(menu); "insert"; widget(menu); "separator"]
   function () postcascade [widget(menu); "postcascade"; MenuIndex]
   # function type is not useful because Camllight types all values. So () type not implemented
   # End new
   function () post_popup ["tk_popup"; widget(menu); int; int]
   function () post_popup_numentry ["tk_popup"; widget(menu); int; int; int]
   }

# Options for menu add cascade
subtype option(menucascade) {
	ActiveBackground
	Accelerator ["-accelerator"; string]
	Background    
	Bitmap
	Command ["-command"; function() ]
	Font ["-font"; string]
	Label ["-label"; string]
	Menu ["-menu"; widget(menu)]
	State ["-state"; State]
	UnderlinedChar
        ActiveForeground
        Foreground
        ImageBitmap
        ImagePhoto
	}

# Options for menu add radiobutton
subtype option(menuradio) {
	ActiveBackground Accelerator Background Bitmap
	Command Font Label State UnderlinedChar
	Value Variable ActiveForeground Foreground
        ImageBitmap ImagePhoto
        SelectColor SelectImageBitmap SelectImagePhoto
	}

# Options for menu add checkbutton
subtype option(menucheck) {
	ActiveBackground Accelerator Background Bitmap
	Command Font Label State UnderlinedChar
	OffValue OnValue Variable ActiveForeground Foreground
        ImageBitmap ImagePhoto
        SelectColor SelectImageBitmap SelectImagePhoto
	}

# Options for menu add command
subtype option(menucommand) {
	ActiveBackground Accelerator Background Bitmap
	Command Font Label State UnderlinedChar ActiveForeground
        Foreground ImageBitmap ImagePhoto
	}

##### Menubar
module menubar {
  function (widget list) get ["tk_menuBar"; widget(frame)]
  function () set ["tk_menuBar"; widget(frame); widget list]
# clear ?
  }

widget message {
   option Anchor
   option Background
   option Borderwidth
   option Cursor
   option Font
   option Foreground
   option PadX
   option PadY
   option Relief
   option Text
   option TextVariable
   option Width
   option Aspect ["-aspect"; int]
   option Justify ["-justify"; Justification]
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option TakeFocus


   function () configure [widget(message); "configure"; option(message) list]
   function (string) configure_get [widget(message); "configure"]
   }

# #####
# Type of the componants of a scale
subtype WidgetElement(scale) {
  Slider ["slider"]
  Trough1 ["trough1"]
  Trough2 ["trough2"]
  Beyond [""]
  }

widget scale {
   option ActiveForeground
   option Background
   option Borderwidth
   option Cursor
   option Font
   option Foreground
   option Orientation
   option Relief
   # cannot be called Command
   option Scalecommand ["-command"; function (float)]   # OK
   option From ["-from"; int]
   option Label ["-label"; string]
   option Length ["-length"; Units]
   option ShowValue ["-showvalue"; bool]
   # option SliderForeground ["-sliderforeground"; Color]          Not supported by TK 4.0
   option SliderLength ["-sliderlength"; Units]
   option State ["-state"; State]	# except Active
   option TickInterval ["-tickinterval"; int]
   option To ["-to"; int]
   option Width
   # New for TK 4.0
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option TakeFocus
   option RepeatDelay
   option TroughColor ["-troughcolor"; Color]
   option Digits ["-digits"; int]
   option Resolution ["-resolution"; float]
   # End New


   function () configure [widget(scale); "configure"; option(scale) list]
   function (string) configure_get [widget(scale); "configure"]
   function (float) get [widget(scale); "get" ]        # Change since TK<4.0 : returns a <<float>>, not an int
   function () set [widget(scale); "set"; float]       # Change since TK<4.0 : takes a <<float>>, not an int
   # New for TK 4.0
   function (float) get_at_pos [widget(scale); "get"; int; int]
   function (WidgetElement) identify [widget(scale); int; int]
   # End new
   }

# builtin_ScrollValue.ml, because hand-made parser
# type sequence ScrollValue {
#   MoveTo ["moveto"; float]
#   ScrollUnit ["scroll"; int; "unit"]
#   ScrollPage ["scroll"; int; "page"]
#   }

type sequence ScrollValue external
########
# Type od the componants of a scrollbar
subtype WidgetElement(scrollbar) {
  Arrow1 ["arrow1"]
  Trough1
  Trough2
  Slider
  Arrow2 ["arrow2"]
  Beyond
  }

widget scrollbar {
   option ActiveForeground
   option Background
   option Borderwidth
   option Cursor
   # option Foreground      Not supported by TK 4.0
   option Orientation
   option Relief
   option RepeatDelay
   option RepeatInterval
   option ScrollCommand ["-command"; function(ScrollValue)]
   option Width
   # New for TK 4.0
   option ActiveBackground
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option TakeFocus
   option TroughColor
   option ElementBorderWidth ["-elementborderwidth"; Units]
   # End new


   function () configure [widget(scrollbar); "configure"; option(scrollbar) list]
   function (string) configure_get [widget(scrollbar); "configure"]
   function (int, int, int, int) get [widget(scrollbar); "get"]
   function (float, float) new_get [widget(scrollbar); "get"]
   # ATTENTION: <<use>> THIS when linking with other elements - DO NOT use old_set
   function () set [widget(scrollbar); "set"; float; float]        # Before TK 4.0 : int; int; int; int
   # New for TK 4.0
   function () activate [widget(scrollbar); "activate"; WidgetElement(scrollbar)]
   function (float) delta [widget(scrollbar); "delta"; int; int]
   function (float) fraction [widget(scrollbar); "fraction"; int; int]
   # ATTENTION: only for backward compatibility - DO NOT use any more
   # Must be used in case where the scrollbar was "set" with a 4-piece retult format
   # i.e : when "set" was done manualy. Don't use when linking with other elements
   # such as lisbox, canvas, and so on ...
   function () old_set [widget(scrollbar); "set"; int; int; int; int]
   # End ATTENTION
   function (WidgetElement) identify [widget(scale); "identify"]
   # End New
   }



################# Text Widget 
type TextIndex external
type TextTag external
type BaseTextIndex external
type TextMark external

# New for TK 4.0
type TabType {
  TabLeft [Units; "left"]
  TabRight [Units; "right"]
  TabCenter [Units; "center"]
  TabNumeric [Units; "numeric"]
  TabStd [Units; ""]
  }
# End new

type WrapMode { 
  WrapNone ["none"]
  WrapChar ["char"]
  WrapWord ["word"]
}

# ...

type Comparison { 
  GT ["<"]
  GE ["<="]
  EQ ["=="]
  LE ["=>"]
  LT [">"]
  NEQ ["!="]
}


# New for TK 4.0
type MarkDirection {
  Mark_Left ["left"]
  Mark_Right ["right"]
  }

type AlignType {
  Align_Top ["top"]
  Align_Bottom ["bottom"]
  Align_Center ["center"]
  Align_Baseline ["baseline"]
  }


subtype option(embeddedw) {
  Align ["-align"; AlignType]
  PadX
  PadY
  Stretch ["-stretch"; bool]
  Window ["-window"; widget]  
  }

subtype option(search) {
  Forwards ["-forwards"]
  Backwards ["backwards"]
  Exact ["exact"]
  Regexp ["regexp"]
  Nocase ["nocase"]
  Count ["count"]
  }

# End new


widget text {
   option Background
   option Borderwidth
   option Cursor
   option ExportSelection
   option Font
   option Foreground
   option InsertBackground
   option InsertBorderWidth
   option InsertOffTime
   option InsertOnTime
   option InsertWidth
   option PadX
   option PadY
   option Relief
   option SelectBackground
   option SelectBorderWidth
   option SelectForeground
   option SetGrid
   option YScrollCommand
   option TextHeight ["-height"; int]
   option State ["-state"; State]
   option TextWidth ["-width"; int]
   option Wrap ["-wrap"; WrapMode]
   # New for TK 4.0
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option TakeFocus
   option XScrollCommand
   option Spacing1 ["-spacing1"; Units]
   option Spacing2 ["-spacing2"; Units]
   option Spacing3 ["-spacing3"; Units]
   option Tabs ["-tabs"; [TabType list]]
   # End new


   function (bool) compare [widget(text); "compare"; TextIndex; Comparison; TextIndex]
   function () configure [widget(text); "configure"; option(text) list]
   function (string) configure_get [widget(text); "configure"]
   function () debug [widget(text); "debug"; bool]
   function () delete [widget(text); "delete"; TextIndex; TextIndex]
   function () delete_char [widget(text); "delete"; TextIndex]
   function (string) get [widget(text); "get"; TextIndex; TextIndex]
   function (string) get_char [widget(text); "get"; TextIndex]
   function (BaseTextIndex) index [widget(text); "index"; TextIndex]
   function () insert [widget(text); "insert"; TextIndex; string]
   # Mark 
   function (TextMark list) mark_names [widget(text); "mark"; "names"]
   function () mark_set [widget(text); "mark"; "set"; TextMark; TextIndex]
   function () mark_unset [widget(text); "mark"; "unset"; TextMark list]
   # Scan 
   function (int) scan_mark [widget(text); "scan"; "mark"; int]
   function (int) scan_dragto [widget(text); "scan"; "dragto"; int]
   # Tags
   function () tag_add [widget(text); "tag"; "add"; TextTag; TextIndex; TextIndex]
   function () tag_add_char [widget(text); "tag"; "add"; TextTag; TextIndex]
   # tag_bind is builtin. beware: text_tag_bind
   function () tag_configure [widget(text); "tag"; "configure"; TextTag; option (texttag) list]
   function () tag_delete [widget(text); "tag"; "delete"; TextTag list]
   function () tag_lower [widget(text); "tag";  "lower"; TextTag; TextTag]
   function () tag_lowest [widget(text); "tag"; "lower"; TextTag]
   function (TextTag list) tag_allnames [widget(text); "tag"; "names"]
   function (TextTag list) tag_indexnames [widget(text); "tag"; "names"; TextIndex]
   function (BaseTextIndex, BaseTextIndex) tag_nextrange [widget(text); "tag"; "nextrange"; TextTag; TextIndex; TextIndex]
   function () tag_raise [widget(text); "tag"; "raise"; TextTag]
   function () tag_raisetop [widget(text); "tag"; "raise"]
   function (BaseTextIndex list) tag_ranges [widget(text); "tag"; "ranges"; TextTag]
   function () tag_remove [widget(text); "tag"; "remove"; TextTag; TextIndex; TextIndex]
   function () tag_remove_char [widget(text); "tag"; "remove"; TextTag; TextIndex]
   function () yview [widget(text); "yview"; TextIndex]
   function () yview_scroll [widget(text); "yview"; ScrollValue]
   function () yview_line [widget(text); "yview"; int]
   function () yview_pickplace [widget(text); "yview"; "-pickplace"; TextIndex]
   function () yview_pickplace_line [widget(text); "yview"; "-pickplace"; int]
   # New for TK 4.0
   function (int list) Bbox [widget(listbox); "bbox"; TextIndex]
   function (int, int, int, int, int) DLineinfo ["dlineinfo"; TextIndex]
   function (MarkDirection) mark_gravity [widget(text); "mark"; "gravity"; TextMark]
   function (BaseTextIndex) search [widget(text); option(search) list; string; "--"; TextIndex; TextIndex]
   function () see [widget(text); "see"; TextIndex]
   function () window_configure [widget(text); "window"; "configure"; TextTag; option (embeddedw) list]
   function () window_create [widget(text); "window"; "create"; TextIndex; option(embeddedw) list]
   function (widget list) window_names [widget(text); "window"; "names"]
   function () xview_scroll [widget(text); "xview"; ScrollValue]
   # End new
   }


subtype option(texttag) {
   Background
   BgStipple ["-bgstipple"; Bitmap]
   Borderwidth
   FgStipple ["-fgstipple"; Bitmap]
   Font
   Foreground
   Relief
   Underline ["-underline"; bool]
   # New for TK 4.0
   Justify
   LMargin1 ["-lmargin1"; Units]
   LMargin2 ["-lmargin2"; Units]
   Offset ["-offset"; Units]
   OverStrike ["-overstrike"; bool]
   RMargin ["-rmargin"; Units]
   Spacing1
   Spacing2
   Spacing3
   Tabs
   Wrap ["-wrap"; WrapMode]
   # End new
   }


# This module will be renamed "toplevelw" to avoid collision with
# Caml Light standard toplevel module.
widget toplevel {
   option Background
   option Borderwidth
   # option Geometry     Not supported by TK 4.0
   option Relief
   option Screen ["-screen"; string]
   option Class ["-class"; string]
   # New for TK 4.0
   option Cursor
   option HighlightColor
   option HighlightBackground
   option HighlightThickness
   option TakeFocus
   option Class
   option Colormap
   option Height
   option Screen ["-screen"; string]
   option Visual
   option Width
   # End new


   function () configure [widget(toplevel); "configure"; option(toplevel) list]
   function (string) configure_get [widget(toplevel); "configure"]
   }

################### Various functions
function () destroy ["destroy"; widget]
# Use Predefined "" for empty bitmap
function (int) dialog ["tk_dialog"; widget; string; string; Bitmap; int; string list]
# Also in listbox
function () listboxSingleSelect ["tk_listboxSingleSelect"; widget(listbox) list]

	
##### focus variations
module focus {
  function (widget) get ["focus"]
  function ()       set ["focus"; widget]
  # bogus when "none"; is returned
  # function (widget) default_get ["focus"; "default"]             Not supported by TK 4.0
  # function ()       default_set ["focus"; "default"; widget]     Not supported by TK 4.0
  # function () none ["focus"; "none"]                             Not supported by TK 4.0
  # New for TK 4.0
  function (widget) get_displayof ["focus"; "-displayof"; widget]
  function () set_force ["focus"; "-force"; widget]
  function (widget) get_lastfor ["focus"; "-lastfor"; widget]
  function (widget) next ["tk_focusNext"; widget]
  function (widget) prev ["tk_focusPrev"; widget]
  function () follow_mouse ["tk_focusFollowsMouse"]
  # End new
}

type GrabStatus {
   GrabNone ["none"]
   GrabLocal ["local"]
   GrabGlobal ["global"]
}

##### grab (current is missing)
module grab {
   function () set_local ["grab"; widget]
   function () set_global ["grab"; "-global"; widget]
   function (GrabStatus) status ["grab"; "status"]
   function () release ["grab"; "release"; widget]
}

##### lower
function () lower ["lower"; widget]
# lower window ?belowThis? can't be written



############ Options
type OptionPriority {
   WidgetDefault  ["widgetDefault"]
   StartupFile    ["startupFile"]
   UserDefault    ["userDefault"]
   Interactive    ["interactive"]
#  Priority (int)
   }

module resource {
   function () add ["option"; "add"; string; string; OptionPriority]
   function () clear ["option"; "clear"]
   function (string) get ["option";  "get"; widget; string; string]
   function () readfile ["option"; "readfile"; string; OptionPriority]
   }


########### Pack
type Side { 
   Side_Left ["left"]
   Side_Right ["right"]
   Side_Top ["top"]
   Side_Bottom ["bottom"]
}

type FillMode { 
   Fill_None ["none"]
   Fill_X ["x"]
   Fill_Y ["y"]
   Fill_Both ["both"]
}

subtype option(pack) {
	After ["-after"; widget]
	Anchor
	Before ["-before"; widget]
	Expand ["-expand"; bool]
	Fill ["-fill"; FillMode]
	In ["-in"; widget]
	PadX
	PadY
	IPadX ["-ipadx"; Units]
	IPadY ["-ipady"; Units]
	Side ["-side"; Side]
	}

function ()  pack ["pack"; widget list; option(pack) list]

module pack {
    function () configure ["pack"; "configure"; widget list; option(pack) list]
    function () forget ["pack"; "forget"; widget list]
    function (bool) propagate_get ["pack"; "propagate"; widget]
    function () propagate_set ["pack"; "propagate"; widget; bool]
    function (widget list) slaves ["pack"; "slaves"; widget]
    }


type BorderMode {
  BorderInside ["inside"]
  BorderOutside ["outside"]
  BorderIgnore ["ignore"]
}

subtype option(place) {
	In X Y Anchor Width Height
	RelX ["-relx"; Units]
	RelY ["-rely"; Units]
	RelWidth ["-relwidth"; float]
	RelHeigth ["-relheight"; float]
	BorderMode ["-bordermode"; BorderMode]
}

function () place ["place"; widget; option(place) list]
module place {
    function ()	configure ["place"; "configure"; widget; option(place) list]
    function () forget ["place"; "forget"; widget]
    function (string) info ["place"; "info"; widget]
    function (widget list) slaves ["place"; "slaves"; widget]
}


# New for TK 4.0

subtype option(selection_clear) {
  DisplayOf ["-displayof"; widget]
  Selection ["-selection"; string]
  }

subtype option(selection_get) {
  DisplayOf
  Selection
  Type ["type"; string]
  }

subtype option(selection_handle) {
  Selection
  Type
  Format ["-format"; string]
  }

subtype option(selection_ownset) {
  Command
  Selection
  }
# End new

module selection {
   function () clear ["selection"; "clear"; option(selection_clear)]
   function (string) get ["selection"; "get"]
   function (widget) own_get ["selection"; "own"; option(selection_clear)]
   function () own_set ["selection"; "own"; option(selection_ownset) list; widget]
   }

module wait {
   function () visibility ["tkwait"; "visibility"; widget]
   function () window ["tkwait"; "window"; widget]
   }

type AtomId {
   AtomId [int]
   }

## update
function () update ["update"]
function () update_idletasks ["update"; "idletasks"]



   
module winfo {
   function (AtomId) atom ["winfo"; "atom"; string]
   function (string) atomname ["winfo"; "atomname"; AtomId]
   function (int) cells ["winfo"; "cells"; widget]
   function (widget list) children ["winfo"; "children"; widget]
   function (string) class ["winfo"; "class"; widget]
   function (widget) containing ["winfo"; "containing"; int; int]
   function (int) depth ["winfo"; "depth"; widget]
   function (bool) exists ["winfo"; "exists"; widget]
   function (float) fpixels ["winfo"; "fpixels"; widget; int]
   function (string) geometry ["winfo"; "geometry"; widget]
   function (int) height ["winfo"; "height"; widget]
   function (string) id ["winfo"; "id"; widget]
   function (symbol list) interps ["winfo"; "interps"]
   function (bool) ismapped ["winfo"; "ismapped"; widget]
   function (string) name ["winfo"; "name"; widget]
   function (widget) parent ["winfo"; "parent"; widget]        # bogus for top
   function (widget) pathname ["winfo"; "pathname"; string]
   function (int) pixels ["winfo"; "pixels"; widget; int]
   function (int) reqheight ["winfo"; "reqheight"; widget]
   function (int) reqwidth ["winfo"; "reqwidth"; widget]
   function (int,int,int) rgb ["winfo"; "rgb"; widget; Color]
   function (int) rootx ["winfo"; "rootx"; widget]
   function (int) rooty ["winfo"; "rooty"; widget]
   function (string) screen ["winfo"; "screen"; widget]
   function (int) screencells ["winfo"; "screencells"; widget]
   function (int) screendepth ["winfo"; "screendepth"; widget]
   function (int) screenheight ["winfo"; "screenheight"; widget]
   function (int) screenmmdepth ["winfo"; "screenmmdepth"; widget]
   function (int) screenmmheight ["winfo"; "screenmmheight"; widget]
   function (string) screenvisual ["winfo"; "screenvisual"; widget]
   function (int) screenwidth ["winfo"; "screenwidth"; widget]
   function (widget) toplevel ["winfo"; "toplevel"; widget]
   function (string) visual ["winfo"; "visual"; widget]
   function (int) vrootheight ["winfo"; "vrootheight"; widget]
   function (int) vrootwidth ["winfo"; "vrootwidth"; widget]
   function (int) vrootx ["winfo"; "vrootx"; widget]
   function (int) vrooty ["winfo"; "vrooty"; widget]
   function (int) width ["winfo"; "width"; widget]
   function (int) x ["winfo"; "x"; widget]
   function (int) y ["winfo"; "y"; widget]
   # New for TK 4.0
   function (AtomId) atom_displayof ["winfo"; "atom"; "-displayof"; widget; string]
   function (string) atomname_displayof ["winfo"; "atomname"; "-displayof"; widget; AtomId]
   function (bool) colormapfull ["winfo"; "colormapfull"; widget]
   function (widget) containing_displayof ["winfo"; "containing"; "-displayof"; widget; int; int]
   function (symbol list) interps_displayof ["winfo"; "interps"; "-displayof"; widget]
   function (string) manager ["winfo"; "manager"; widget]
   function (widget) pathname_displayof ["winfo"; "pathname"; "-displayof"; widget; string]
   function (int) pointerx ["winfo"; "pointerx"; widget]
   function (int) pointery ["winfo"; "pointery"; widget]
   function (int, int) pointerxy ["winfo"; "pointerxy"; widget]
   function (string) server ["winfo"; "server"; widget]
   function (bool) viewable ["winfo"; "viewable"; widget]
   function (string) visualsavailable ["winfo"; "visualsavailable"; widget]
   # End new
}

type FocusModel {
   FocusActive ["active"]
   FocusPassive ["passive"]
}

module wm {
### Aspect
   function () aspect_set ["wm"; "aspect"; widget;int;int;int;int]
   # aspect: problem with empty return
   function (int,int,int,int) aspect_get ["wm"; "aspect"; widget]
   # clear missing
### WM_CLIENT_MACHINE
   function () client_set ["wm"; "client"; widget; string]
   function (string) client_get ["wm"; "client"; widget]
   # clear missing
### WM_COMMAND
   # command requires lists

   function () deiconify ["wm"; "deiconify"; widget]

### Focus model
   function () focusmodel_set ["wm"; "focusmodel"; widget; FocusModel]
   function (FocusModel) focusmodel_get ["wm"; "focusmodel"; widget]

   function (string) frame ["wm"; "frame"; widget]

### Geometry
   # geometry should be a type
   function () geometry_set ["wm"; "geometry"; widget; string]
   function (string) geometry_get ["wm"; "geometry"; widget]

   # grid is missing

### Groups
   function () group_set ["wm"; "group"; widget; widget]
   # group: problem with empty return
   function (string) group_get ["wm"; "group"; widget]
### Icon bitmap
   function () iconbitmap_set ["wm"; "iconbitmap"; widget; Bitmap]
   # iconbitmap: problem with empty return
   function (Bitmap) iconbitmap_get ["wm"; "iconbitmap"; widget]
   # clear missing

   function () iconify ["wm"; "iconify"; widget]

### Icon mask
   function () iconmask_set ["wm"; "iconmask"; widget; Bitmap]
   # iconmask: problem with empty return
   function (Bitmap) iconmask_get ["wm"; "iconmask"; widget]
   # clear missing
### Icon name
   function () iconname_set ["wm"; "iconname"; widget; string]
   function (string) iconname_get ["wm"; "iconname"; widget]
### Icon position
   function () iconposition_set ["wm"; "iconposition"; widget; int; int]
   # iconposition: problem with empty return
   function (int,int) iconposition_get ["wm"; "iconposition"; widget]
### Icon window
   function () iconwindow_set ["wm"; "iconwindow"; widget; widget]
   # iconwindow: problem with empty return
   function (widget) iconwindow_get ["wm"; "iconwindow"; widget]
   # clear missing
### Sizes
   function () maxsize_set ["wm"; "maxsize"; widget; int; int]
   function (int,int) maxsize_get ["wm"; "maxsize"; widget]
   # clear missing
   function () minsize_set ["wm"; "minsize"; widget; int; int]
   function (int,int) minsize_get ["wm"; "minsize"; widget]
### Override
   function () overrideredirect_set ["wm"; "overrideredirect"; widget; bool]
   function (bool) overrideredirect_get ["wm"; "overrideredirect"; widget]
   function (string) state ["wm"; "state"; widget]
   function (string) title_get ["wm"; "title"; widget]
   function () title_set ["wm"; "title"; widget; string]
   function () withdraw ["wm"; "withdraw"; widget]
   # New for Tk 4.0
   function (widget list) colormapwindows_get ["wm"; "colormapwindows"; widget]
   function () colormapwindows_set ["wm"; "colormapwindows"; widget; [widget list]]
   function (bool, bool) resizable_get ["wm"; "resizable"; widget(toplevel)]
   function () resizable_set ["wm"; "resizable"; widget(toplevel); bool; bool]
   # End new
}

################ This stuff is not native Tk
# The corresponding source must have been installed in $tk_library
# and the auto_load index must have been updated
# Alternatively, you can add in your .wishrc or .camltkrc a line
# lappend auto_path /path/to/contrib
# Don't forget to run a tclsh or wish and type 
# auto_mkindex /path/to/contrib *.tcl
# or something equivalent (man library(n) in tcl docs)
module contrib {
   # File Dialog by Sven Delmas
   function (string) FSBox ["FSBox"]
   }



# #####################
# New stuff for TK V4.0
#######################

type Bindings {
   TagBindings [string]
   WidgetBindings [widget]
   }

function () bindtags ["bindtags"; widget; [Bindings list]]


# ##########
# Bell ringing...
module bell {
  function () ring ["bell"]
  function () ring_displayof ["bell"; "-displayof" ; widget]
  }

# ###########
# Bitmap editor program
module bitmapeditor {
  function () edit_bitmap ["bitmap"]
  }

# ##########
# Bitmap images module (only 2 color-images)
type ImageBitmap {
  ImageBitmap [string]
  }

subtype option(bitmapimage) {
  Background
  Data ["-data"; string]
  File ["-file"; string]
  Foreground
  Maskdata ["-maskdata"; string]
  Maskfile ["-maskfile"; string]
  }

module imagebitmap {
  function (ImageBitmap) create ["image"; "create"; "bitmap"; option(bitmapimage) list]
  function (string) configure [ImageBitmap; "configure"; option(bitmapimage) list]
  # Functions herited from the "image" TK class
  function () delete ["image"; "delete"; ImageBitmap]
  function (int) height ["image"; "height"; ImageBitmap]
  # function type (from TK's "image type") isn't useful
  function (int) width ["image"; "width"; ImageBitmap]
  }

# #########
# Photo images module (color-images)
type ImagePhoto {
  ImagePhoto [string]
  }

type PaletteType external  # builtin_palette.ml

subtype option(photoimage) {
  Data ["-data"; string]
  Format ["-format"; string]
  File ["-file"; string]
  Gamma ["-gamma"; float]
  Height
  Palette ["-palette"; PaletteType]
  Width
  }

subtype option(photocopy) {
  Copyfrom ["-from"; int; int; int; int]
  Copyto ["-to"; int; int; int; int]
  Shrink ["-shrink"]
  Zoom ["-zoom"; int]
  Subsample ["-subsample"; int; int]
  }

subtype option(photoread) {
  Readformat ["-format"; string]
  Readfrom ["-from"; int; int; int; int]
  Shrink ["-shrink"]
  ReadTo ["-to"; int; int]
  }

subtype option(photoput) {
  Putto ["-to"; int; int; int; int]
  }

subtype option(photowrite) {
  WriteFormat ["-format"; string]
  Writefrom ["-from"; int; int; int; int]
  }

module imagephoto {
  function (ImagePhoto) create ["image"; "create"; "photo"; option(photoimage) list]
  function () blank [ImagePhoto; "blank"]
  function (string) configure [ImagePhoto; "configure"; option(photoimage) list]
  function () copy [ImagePhoto; "copy"; ImagePhoto; option(photocopy) list]
  function (int, int, int) get [ImagePhoto; "get"; int; int]
  function () put [ImagePhoto; "put"; string; option(photoput) list]
  function () read [ImagePhoto; "read"; string; option(photoread) list]
  function () redither [ImagePhoto; "redither"]
  function () write [ImagePhoto; "write"; option(photowrite) list]
  # Functions herited from the "image" TK class
  function () delete ["image"; "delete"; ImagePhoto]
  function (int) height ["image"; "height"; ImagePhoto]
  # function type (from TK's "image type")     Isn't useful
  function (int) width ["image"; "width"; ImagePhoto]
  }


#type ReturnType {
#  StringType ["STRING"]
#  FilenameType ["FILE_NAME"]
#  }

subtype option(clipboard_append) {
  DisplayOf ["-displayof"; Widget]
  Format ["-format"; string]
#  Type ["-type"; ReturnType]
  }

module clipboard {
  function () clear ["clipboard"; "clear"]
  function () clear_displayof ["clipboard"; "clear"; "-displayof"; widget]
  function () append ["clipboard"; "append"; option(clipboard_append) list; string]
  }

module palette {
  function () set_background ["tk_setPalette"; Color]
  function () oldcolor ["tk_bisque"]
  }



